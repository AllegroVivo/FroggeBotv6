from __future__ import annotations
import re
################################################################################

__all__ = ("IconMap", )

SYMBOL_MAP = {
    "Sprout": "",
    "Star": "",
    "LCurvedArrow": "",
    "RCurvedArrow": "",
    "HighQuality": "",
    "Collectible": "",
    "Clock": "",
    "Gil": "",
    "Hyadelyn": "",
    "MouseNoClick": "",
    "MouseLeftClick": "",
    "MouseRightClick": "",
    "MouseBothClick": "",
    "MouseWheel": "",
    "Mouse1": "",
    "Mouse2": "",
    "Mouse3": "",
    "Mouse4": "",
    "Mouse5": "",
    "Lv": "",
    "ST": "",
    "Nv": "",
    "LBracket": "",
    "Rbracket": "",
    "AM": "",
    "PM": "",
    "ArrowRight": "",
    "ArrowDown": "",
    "Number0": "",
    "Number1": "",
    "Number2": "",
    "Number3": "",
    "Number4": "",
    "Number5": "",
    "Number6": "",
    "Number7": "",
    "Number8": "",
    "Number9": "",
    "BoxedNumber0": "",
    "BoxedNumber1": "",
    "BoxedNumber2": "",
    "BoxedNumber3": "",
    "BoxedNumber4": "",
    "BoxedNumber5": "",
    "BoxedNumber6": "",
    "BoxedNumber7": "",
    "BoxedNumber8": "",
    "BoxedNumber9": "",
    "BoxedNumber10": "",
    "BoxedNumber11": "",
    "BoxedNumber12": "",
    "BoxedNumber13": "",
    "BoxedNumber14": "",
    "BoxedNumber15": "",
    "BoxedNumber16": "",
    "BoxedNumber17": "",
    "BoxedNumber18": "",
    "BoxedNumber19": "",
    "BoxedNumber20": "",
    "BoxedNumber21": "",
    "BoxedNumber22": "",
    "BoxedNumber23": "",
    "BoxedNumber24": "",
    "BoxedNumber25": "",
    "BoxedNumber26": "",
    "BoxedNumber27": "",
    "BoxedNumber28": "",
    "BoxedNumber29": "",
    "BoxedNumber30": "",
    "BoxedNumber31": "",
    "BoxedPlus": "",
    "BoxedQuestionMark": "",
    "BoxedStar": "",
    "BoxedRoman1": "",
    "BoxedRoman2": "",
    "BoxedRoman3": "",
    "BoxedRoman4": "",
    "BoxedRoman5": "",
    "BoxedRoman6": "",
    "BoxedLetterA": "",
    "BoxedLetterB": "",
    "BoxedLetterC": "",
    "BoxedLetterD": "",
    "BoxedLetterE": "",
    "BoxedLetterF": "",
    "BoxedLetterG": "",
    "BoxedLetterH": "",
    "BoxedLetterI": "",
    "BoxedLetterJ": "",
    "BoxedLetterK": "",
    "BoxedLetterL": "",
    "BoxedLetterM": "",
    "BoxedLetterN": "",
    "BoxedLetterO": "",
    "BoxedLetterP": "",
    "BoxedLetterQ": "",
    "BoxedLetterR": "",
    "BoxedLetterS": "",
    "BoxedLetterT": "",
    "BoxedLetterU": "",
    "BoxedLetterV": "",
    "BoxedLetterW": "",
    "BoxedLetterX": "",
    "BoxedLetterY": "",
    "BoxedLetterZ": "",
    "Circle": "",
    "Square": "",
    "Cross": "",
    "Triangle": "",
    "Hexagon": "",
    "Prohibited": "",
    "Dice": "",
    "XPointer": "",
    "OPointer": "",
    "Flower": "",
    "E": "",
    "TrianglePointer": "",
    "CrossHollow": "",
    "Octogonal1": "",
    "Octogonal": "",
    "Octogonal3": "",
    "Octogonal4": "",
    "Octogonal5": "",
    "Octogonal6": "",
    "Octogonal7": "",
    "Octogonal8": "",
    "Octogonal9": "",
    "Chains": "",
    "LT": "",
    "ST": "",
    "ET": "",
    "OZ": "",
    "SZ": "",
    "EZ": "",
    "HL": "",
    "HS": "",
    "HE": "",
    "FancyS": "",
    "Dots": "",
    "HexDots": "",
    "Shield": "",
    "Loop": "",
    "FancyX": "",
    "TinyM": "",
    "Jellyfish": "",
    "DiamondDown": "",
    "DiamondX": "",
    "LevelSyncA": "",
    "LevelSyncB": "",
}

################################################################################
class IconMap:

    @staticmethod
    def parse_markdown(markdown: str) -> str:
        
        # Use regex to find all patterns in braces
        pattern = re.compile(r'\{(\w+)}')
    
        def replace_match(match):
            # Extract the shorthand from the match
            shorthand = match.group(1)
            # Return the corresponding Unicode symbol or the original shorthand if not found
            return SYMBOL_MAP.get(shorthand, match.group(0))
    
        # Substitute all matches with the corresponding Unicode symbol
        return pattern.sub(replace_match, markdown)
    
################################################################################
    